[{"/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/index.js":"1","/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/reportWebVitals.js":"2","/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/App.js":"3","/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/index.js":"4","/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/reportWebVitals.js":"5","/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/App.js":"6"},{"size":535,"mtime":1659971783210,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1659971783210,"results":"9","hashOfConfig":"8"},{"size":13377,"mtime":1683212203721,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1721324012805,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1721324012805,"results":"13","hashOfConfig":"12"},{"size":15134,"mtime":1722871382936,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iwt0mx",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18f2oyh",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/index.js",[],[],"/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/reportWebVitals.js",[],[],"/Users/aasthasavaliya/Documents/GitHub/PW-Custom/src/App.js",["34","35"],[],"import {useEffect, useState} from 'react'\nimport logo from \"./assets/Black-Font.png\";\nimport copy from \"./assets/clippy.svg\";\nimport \"./App.css\";\n\n\nfunction App() {\n  let initialFormData = {\n    goldPrice: 40,\n    goldWeight: \"\",\n    roundWeight: \"\",\n    roundPrice: 275,\n    baguetteWeight: \"\",\n    roundTotal: 0,\n    baguettePrice: 400,\n    goldTotal: 0,\n    baguetteTotal: 0,\n    miscTotal: 0,\n    miscPrice: 0,\n    miscWeight: \"\",\n    totalWithoutRound: 0,\n  };\n\n  const [formData, setFormData] = useState(initialFormData);\n\n  function handleChange(fieldName, e) {\n    setFormData((prevState) => {\n      let updatedValues = {\n        ...prevState,\n        [fieldName]:\n          e.target.value[0] === \"0\"\n            ? e.target.value.substring(1)\n            : e.target.value,\n      };\n\n      updatedValues[\"goldTotal\"] = isNaN(\n        parseFloat(updatedValues[\"goldWeight\"])\n      )\n        ? updatedValues[\"goldPrice\"] * 0\n        : updatedValues[\"goldPrice\"] * parseFloat(updatedValues[\"goldWeight\"]);\n\n      updatedValues[\"baguetteTotal\"] = isNaN(\n        parseFloat(updatedValues[\"baguetteWeight\"])\n      )\n        ? updatedValues[\"baguettePrice\"] * 0\n        : updatedValues[\"baguettePrice\"] *\n          parseFloat(updatedValues[\"baguetteWeight\"]);\n\n      updatedValues[\"miscTotal\"] = isNaN(\n        parseFloat(updatedValues[\"miscWeight\"])\n      )\n        ? updatedValues[\"miscPrice\"] * 0\n        : updatedValues[\"miscPrice\"] * parseFloat(updatedValues[\"miscWeight\"]);\n\n      updatedValues[\"roundTotal\"] = isNaN(\n        parseFloat(updatedValues[\"roundWeight\"])\n      )\n        ? updatedValues[\"roundPrice\"] * 0\n        : updatedValues[\"roundPrice\"] *\n          parseFloat(updatedValues[\"roundWeight\"]);\n\n      updatedValues[\"totalWithoutRound\"] =\n        updatedValues[\"goldTotal\"] +\n        updatedValues[\"baguetteTotal\"] +\n        updatedValues[\"miscTotal\"];\n\n      if (e.target.value.length === 0) {\n        updatedValues[fieldName] = 0;\n      }\n      return updatedValues;\n    });\n  }\n\n  function clipBoadHandler(e) {\n    e.preventDefault();\n    let textToCopy = \"\";\n    [275, 300, 350, 400, 450].map((value) => {\n      textToCopy += `\\n$${value} / Ct = ${parseFloat(\n        Math.ceil(\n            ((formData[\"totalWithoutRound\"] + formData[\"roundWeight\"] * value) *\n            1.1)/10\n        )*10\n      )}`;\n    });\n\n    navigator.clipboard.writeText(textToCopy);\n  }\n\n  function clipBoadHandler2(e) {\n    e.preventDefault();\n    let textToCopy = \"\";\n    [{name:'TTLB',value:275}, {name:'SI',value:300}, {name:'SI/ VS', value:350}, {name:'VS',value:400}, {name:'VS/ VVS', value:450}].map((value) => {\n      textToCopy += `\\n${value.name} = $${parseFloat(\n        Math.ceil(\n            ((formData[\"totalWithoutRound\"] + formData[\"roundWeight\"] * `${value.value}`) *\n            1.1)/10\n        )*10\n      )}`;\n    });\n\n    navigator.clipboard.writeText(textToCopy);\n  }\n\n  function resetForm() {\n    const resetData = {\n      goldWeight: \"\",\n      roundWeight: \"\",\n      baguetteWeight: \"\",\n      miscWeight: \"\",\n      goldTotal: 0,\n      baguetteTotal: 0,\n      miscTotal: 0,\n      miscPrice: 0,\n      roundTotal: 0,\n      roundPrice: 275,\n      totalWithoutRound: 0,\n    };\n\n    setFormData((prevState) => {\n      return { ...prevState, ...resetData };\n    });\n  }\n\n  useEffect(() => {\n   document.title = \"PW Custom\"\n}, []);\n\n  return (\n    <>\n      <div className=\"py-4 branding\">\n        <img\n          src={logo}\n          alt=\"Prime Wholesale logo\"\n          width=\"170px\"\n          className=\"img-responsive center-block d-block mx-auto\"\n        />\n      </div>\n\n      <section className=\"h-100 p-md-5 p-3\">\n        <form id={\"main-form\"}>\n          {/* Heading */}\n          <h3 className=\"text-center py-2\" style={{ fontFamily: \"serif\" }}>\n            Custom Jewelry Pricing\n          </h3>\n\n          {/* GOLD CONTAINER */}\n          <div className=\"gold-containers\">\n            <div className=\"d-flex align-items-center mb-3\">\n              <h4 className=\"me-2 m-0\">Gold</h4>\n              <input\n                name=\"gold\"\n                onChange={handleChange.bind(this, \"goldWeight\")}\n                type=\"text\"\n                className=\"form-control text-center\"\n                style={{ borderBottom: \"1px solid black\", borderRadius: 0 }}\n                aria-label=\"Grams\"\n                value={formData[\"goldWeight\"]}\n              />\n              <span>Gr.</span>\n            </div>\n\n            <div className=\"input-group mb-3 pe-5\">\n              <label>$&nbsp;</label>\n              <input\n                name=\"goldPrice\"\n                onChange={handleChange.bind(this, \"goldPrice\")}\n                type=\"text\"\n                className=\"form-control text-center\"\n                aria-label=\"Rate\"\n                value={formData[\"goldPrice\"]}\n              />\n\n              {/*<select*/}\n              {/*    onChange={handleChange.bind(this, \"goldPrice\")}*/}\n              {/*    name=\"goldPrices\"*/}\n              {/*  >*/}\n              {/*    <option value={39}>39</option>*/}\n              {/*    <option value={40}>40</option>*/}\n              {/*  </select>*/}\n              <label className={\"me-3\"}>=</label>\n              <label>{formData[\"goldTotal\"].toFixed(2)}</label>\n            </div>\n          </div>\n          {/* GOLD CONTAINER END*/}\n\n          <hr />\n\n          {/* ROUND DIAMOND CONTAINER */}\n          <div className=\"round-diam-container\">\n            <div className=\"d-flex align-items-center mb-3\">\n              <h4 className=\"me-2 m-0\">Round Diamonds</h4>\n              <input\n                type=\"text\"\n                onChange={handleChange.bind(this, \"roundWeight\")}\n                className=\"form-control text-center\"\n                aria-label=\"Grams\"\n                value={formData[\"roundWeight\"]}\n                style={{ borderBottom: \"1px solid black\", borderRadius: 0 }}\n              />\n              <span>Ctw.</span>\n            </div>\n            <div className=\"input-group mb-3 pe-5\">\n              <form>\n                <select\n                  onChange={handleChange.bind(this, \"roundPrice\")}\n                  name=\"roundPrices\"\n                >\n                  <option value={275}>275</option>\n                  <option value={300}>300</option>\n                  <option value={350}>350</option>\n                  <option value={400}>400</option>\n                  <option value={450}>450</option>\n                </select>\n              </form>\n              <label className={\"mx-3\"}>=</label>\n\n              <label>{formData[\"roundTotal\"].toFixed(2)}</label>\n            </div>\n          </div>\n          {/* ROUND DIAMOND CONTAINER END */}\n\n          <hr />\n\n          {/* BAGUETTE DIAMOND CONTAINER*/}\n\n          <div className=\"baguette-diam-container\">\n            <div className=\"d-flex align-items-center mb-3\">\n              <h4 className=\"me-2 m-0\">Baguette Diamonds</h4>\n              <input\n                type=\"text\"\n                onChange={handleChange.bind(this, \"baguetteWeight\")}\n                className=\"form-control text-center\"\n                value={formData[\"baguetteWeight\"]}\n                aria-label=\"Carat weight\"\n                style={{ borderBottom: \"1px solid black\", borderRadius: 0 }}\n              />\n              <span>Ctw.</span>\n            </div>\n            <div className=\"input-group mb-3 pe-5\">\n              <label>$</label>\n              <input\n                type=\"text\"\n                value={formData[\"baguettePrice\"]}\n                className=\"form-control text-center\"\n                aria-label=\"Rate\"\n                onChange={handleChange.bind(this, \"baguettePrice\")}\n              />\n\n              <label className={\"me-3\"}>=</label>\n              <label>{formData[\"baguetteTotal\"].toFixed(2)}</label>\n            </div>\n          </div>\n          {/*BAGUETTE DIAMOND CONTAINER END*/}\n\n          <hr />\n\n          {/*MISCELLANEOUS DIAMOND CONTAINER*/}\n          <div className=\"misc-diam-container\">\n            <div className=\"d-flex align-items-center mb-3\">\n              <h4 className=\"me-2 m-0\">Misc. Diamonds</h4>\n              <input\n                type=\"text\"\n                onChange={handleChange.bind(this, \"miscWeight\")}\n                className=\"form-control text-center\"\n                value={formData[\"miscWeight\"]}\n                aria-label=\"Grams\"\n                style={{ borderBottom: \"1px solid black\", borderRadius: 0 }}\n              />\n              <span>Ctw.</span>\n            </div>\n\n            <div className=\"input-group mb-3 pe-5\">\n              <label>$</label>\n              <input\n                type=\"text\"\n                onChange={handleChange.bind(this, \"miscPrice\")}\n                className=\"form-control text-center\"\n                aria-label=\"Rate\"\n                value={formData[\"miscPrice\"]}\n                style={{ borderBottom: \"1px solid grey\", borderRadius: 0 }}\n              />\n\n              <label className={\"me-3\"}>=</label>\n              <label>{formData[\"miscTotal\"].toFixed(2)}</label>\n            </div>\n          </div>\n          {/*MISCELLANEOUS DIAMOND CONTAINER END*/}\n\n          <hr />\n\n          {/*TOTAL CONTAINER*/}\n          <div className=\"total-container\">\n            <form className=\"row\">\n              <div className=\"col-12\">\n                <div className=\"d-flex justify-content-between\">\n                  <h3 className=\"text-primary\">Grand Total</h3>\n                  {/*<button onClick={clipBoadHandler} className=\"btn copy\">*/}\n                  {/*<img src={copy} alt=\"Copy to clipboard\"/>*/}\n                  <h3 onClick={resetForm}>Clear</h3>\n                  {/*</button>*/}\n                </div>\n                <div className=\"p-2 row\" style={{ border: \"1px solid grey\" }}>\n                  <div className=\"col\">\n                    {[275, 300, 350, 400, 450].map((value) => {\n                      return (\n                        <div className=\"input-group\" key={value}>\n                          <span className=\"fs-5\">${value} / ct = </span>\n                          <span className={\"fs-5 ms-2\"}>\n                            {isNaN(parseFloat(formData[\"roundWeight\"]))\n                              ? Math.ceil(\n                                  ((formData[\"totalWithoutRound\"] + 0 * value) *\n                                    1.1) /\n                                    10\n                                ) * 10\n                              : Math.ceil(\n                                  ((formData[\"totalWithoutRound\"] +\n                                    value * formData[\"roundWeight\"]) *\n                                    1.1) /\n                                    10\n                                ) * 10}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  <div className=\"col-1 d-flex justify-content-end align-items-start\">\n                    <button onClick={clipBoadHandler} className=\"btn copy\">\n                      <img src={copy} alt=\"Copy to clipboard\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n          {/*TOTAL CONTAINER END*/}\n\n\n          {/*TOTAL CONTAINER 2*/}\n          <div className=\"total-container mt-4\">\n            <form className=\"row\">\n              <div className=\"col-12\">\n\n                <div className=\"p-2 row\" style={{ border: \"1px solid grey\" }}>\n                  <div className=\"col\">\n                    {[{name:'TTLB',value:275}, {name:'SI',value:300}, {name:'SI/ VS', value:350}, {name:'VS',value:400}, {name:'VS/ VVS', value:450}].map((value) => {\n                      return (\n                        <div className=\"input-group\" key={value.name}>\n                          <span className=\"fs-5\">{value.name} = </span>\n                          {/*<span className=\"fs-5\">Si/ Vs = </span>*/}\n                          {/*<span className=\"fs-5\">Vs = </span>*/}\n                          {/*<span className=\"fs-5\">Vs/ Vvs = </span>*/}\n                          <span className={\"fs-5 ms-2\"}>$\n                            {isNaN(parseFloat(formData[\"roundWeight\"]))\n                              ? Math.ceil(\n                                  ((formData[\"totalWithoutRound\"] + 0 * value.value) *\n                                    1.1) /\n                                    10\n                                ) * 10\n                              : Math.ceil(\n                                  ((formData[\"totalWithoutRound\"] +\n                                    value.value * formData[\"roundWeight\"]) *\n                                    1.1) /\n                                    10\n                                ) * 10}\n                          </span>\n                        </div>\n                      );\n                    })}\n                  </div>\n\n                  <div className=\"col-1 d-flex justify-content-end align-items-start\">\n                    <button onClick={clipBoadHandler2} className=\"btn copy\">\n                      <img src={copy} alt=\"Copy to clipboard\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n          {/*TOTAL CONTAINER 2 END*/}\n\n        </form>\n      </section>\n    </>\n  );\n}\n\nexport default App;","/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/index.js",[],[],"/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/reportWebVitals.js",[],[],"/Users/aasthasavaliya/Documents/GitHub/PW-Custom-Silver/src/App.js",["36","37"],[],{"ruleId":"38","severity":1,"message":"39","line":77,"column":43,"nodeType":"40","messageId":"41","endLine":77,"endColumn":45},{"ruleId":"38","severity":1,"message":"39","line":92,"column":146,"nodeType":"40","messageId":"41","endLine":92,"endColumn":148},{"ruleId":"38","severity":1,"message":"39","line":91,"column":43,"nodeType":"40","messageId":"41","endLine":91,"endColumn":45},{"ruleId":"38","severity":1,"message":"39","line":106,"column":146,"nodeType":"40","messageId":"41","endLine":106,"endColumn":148},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]